// 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

// 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

// 例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]

// 链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree

思路：
是不是可以先查找到指定的2个节点，然后通过回溯，查看是否有相同且最近的节点。
1. 先找到对应的节点。
2. 回溯组成一个数组来维护，目标节点至跟节点的集合。
3. 这个2个集合找到相同，且index最大的。

不好回溯，最好是搜索查找时就带着上级的节点
